Микросервисы 
Мокросервис - эт независимый, автономный ресурс, спроектированный как отдельный выполняемый файл или процесс 
Разрабатыввется, тестируется, развёртывается и масштабируется независимо от других микро сервисов 
Слабая взаимозависимость, высокая масштабируемость и ориентированность на службы 
Микросервисы
Каждый микросервис выполняет ровно одну функцию, которая видет себе одинаково для всех потребителей 
Приложение на основе микросервисов - это группа из нескольких независимых и автономных микросервисов, каждый из которых реализует строго определëнную функцию и дляя обеспечения общей функциональности приложения взаимодействует с другими и микросервисами через чётко оппределëннве протоколы 

Особенности разработки монолитных систем
Низкая производительность
Плохая масштабируемость
Долгое цыклы регрессивного тестирования 
Долгие цыклы обновления и повторного развёртывания (невозможность бысто внедрить мелкие исправления и улучшения) 
Незапланированные простои 
Возможные прости на время, пока производится обновление 
Сложность внедрения новых технологий и языков программирования
Невозможность выборочного масштабирования необходимых компонентов или функций 

Выгоды микросервисных архитектур 
Простота. Каждый микросервис выполняется только одну чётко определëнную функцию, поэтому требуется меньше кода

Выгоды микросервисных архитектур
Непрерывное развитие. Благодаря меньшему количеству взаимодействий в коде и более. Быстрому циклу разработки парадигма микросервисов поддерживает культуру непрерывного развёртывания и интеграции разработки эксплуатации (DevOps) и фактически подталкивает к её использованию 
Больше свободы т меньше зависимости. Микросервисы по определению автономны и независимы. Команда разработчиков может сосредоточиться на своём микросервисе и свободно расширять его возможности, не опасаясь нарушать работу дурного микросервиса, пока они гарантируют неизменяемость интерфейса
Изоляция отказов. Изоляция отказов- это явление, когда отказ одной части системы не приводит к отказу всей системы
Разделение и децентрализация данных. В отличие от монолитных приложений, где всё данные обычно хранятся вместе в центральной базе данных, микросервисы дают возможность разделить данные. Каждый микросервис может владеть только своими данными и не делятся ими с другими микросервисами
Широта выбора. В отличие от монолитного приложения, где всё компоненты используют единую базу данных, платформу и должны быть написаны на одном языке програмирования, микросервисы дают возможность использовать инструменты, лучше подходящие для каждого случая. 

Недостатки микросервисов
сложность и устранение неисправностей. Микросервисы предлагают свои возможности посредством механизма взаимодействий между микросервисами, что увеливаетсч число потенциальных утечек заказа 
Увеличение задержки. Внутрипроцессные взаимодействия (как и в монолитных приложениях) выполняются намного быстрее межпроцнссных (как в случае с микросервисами) 
Сложность сопровождения. Когда приложение стоит из сотен или даже тысяч микросервисов, группами оперативного сопровождения приходится преодолевать сложности. 

Сопровождение микросервисов
Поддержка существующих реализаций клиентов. Иногда при изменении основных функций микросервиса может потребоваться изменение его интерфейса

Прцессы и их поддержка в операционнвх системах 
Понятие процесса 
Процесс и программа 
Термин "процесс" характеризуется совокупностью 
Набора исполняемых команд
Ассоцированных с ним ресурсов
Текущего момента его выполнения 
Процесс ≠ программа , которая исполняется 
Для использования одной программы может организоваться несколько процессов 
В рамках одного процесса можнт использоваться несколько программ 
В рамках процесса может исполняться код, отсутствующий в программе 

Набор операций 
Одноразовые
Создание процесса - завершение процесса
Многоразовые
Запуск процесса - приостановка процесса
Блокирование процесса - разблокирование процесса 
(Изменение приоритета)
Process Control Block и контекст процесса
Контекст процесса
Системный контекст:
Состояяние процесса
Регистровый контекст:
Програмный счётчик
Содержимое регистров
Данные для планирования использования процессора и управление паматью
Учётная информация
Сведения об устройствах ввода-вывода, связанные с процессом

Создание процесса
Порождение нового PCB с состоянием процесса рождение
Присвоение идентификационного номера 
Выделение ресурсов  (из ресурсов родителя, из ресурсов ОС) 
Занесение в адресное пространство кода и установка значения программного счётчика( дубликат родителя, из файла) 
Окончание заполнения PCB
Изменение состояния процесса на готовность 

Завершение процесса
Изменение состояния процесса на закончил исполнение 
Освобождение ресурсов 
Очистка соответсвующих элементов в PCB
Сохранение в PCB информации о причинах завершения 

Запуск процесса
Выбор одного из процессов, находящихся в состоянии готовности
Изменение состояния выбранного процесса на исполнение
Обеспечение наличия в оперативной памяти информации, необходимой для его выполнения
 
Приостановка процесса
Автоматичкое сохранение программного счётчика и части регистров 
Передача управления по специальному адресу
Сохранение динамической части 

Блокирование процесса
Обработка системного вызова
Сохранение контекста в PCB
Перевод процесса в состояние ожидания

Разблокирование процесса
Уточнение того, какое именно событие произошло
Проверка наличия процессп, ожидающего этого события 

Уровни планирования процесслв
Долгострочн планирование - планирование заданий
Среднесрочное планирование- swapping
Краткосрочное планирование - планирование использования процессов 

Цели планирования 
Справедливость
Эффективность
Скоращение полного времени выполнения 
Скоращение времени ожидания
Сокращенре времени отклика

Желаемые свойства алгоритмов планирования 
Предсказуемость
Минимилизация накладных ресурсов 
Равномерность загрузки вычислительной системы 
Масштабируемость 

Параметры планирования 
Статические:
Статические параметры вычислительной системы - например, предельные значение её ресурсов 
Статические параметры процесса - кем запущен, степень важности, запрошенное процессорное время, какие требуются ресурсы 
Динамические:
Динамические параметры вычислительной системы- например, количество свободных ресурсов в данный момент 
Динамические параметры процесса- текущий приоритет, размер занимаемой оперативной памяти, использованное процессного времени 

Основные причины для объединения усилий процессов 
Повышение скорости решение задач
Совместное мсользование данных
Модульная конструкция какой либо системы
Для удобства работы пользователя
Кооперативные или взаимодействующие процессы - это процессы, которые влияют на поведение друг друга путём Обинна информацией
